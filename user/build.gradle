import org.springframework.boot.gradle.tasks.bundling.BootJar
import org.springframework.boot.gradle.tasks.run.BootRun

springBoot {
    mainClass = 'com.damso.user.UserApplication'
}

dependencies {
    implementation project(':core')
    implementation project(':auth')
    implementation project(':domain')

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // auth
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Tailwind 빌드 Task 추가 (OS에 따라 npm 경로 자동 설정)
tasks.register('tailwindBuild') {
    group = "build"
    description = "Tailwind CSS 빌드 실행"
    doLast {
        println "Tailwind CSS 빌드를 시작합니다..."

        // OS에 따른 npm 경로 설정
        def npmCommand = System.getProperty('os.name').toLowerCase().contains('win') ? 'npm.cmd' : 'npm'

        // npm이 PATH에 있는지 확인
        def npmPath = System.getenv('PATH')
                .split(File.pathSeparator)
                .collect { new File(it, npmCommand) }
                .find { it.exists() }
                ?.absolutePath

        if (!npmPath) {
            throw new GradleException("npm을 찾을 수 없습니다. Node.js가 설치되어 있는지 확인하세요.")
        }

        def process = new ProcessBuilder(npmPath, 'run', 'build')
                .directory(projectDir)
                .inheritIO()
                .start()
        def exitCode = process.waitFor()
        if (exitCode != 0) {
            throw new GradleException("Tailwind CSS 빌드 실패!")
        }
        println "Tailwind CSS 빌드 완료 (npm run build)"
    }
}

// 모든 bootRun 및 bootJar Task에 Tailwind 빌드 의존성 추가
tasks.withType(BootRun).configureEach {
    dependsOn tailwindBuild
}

tasks.withType(BootJar).configureEach {
    dependsOn tailwindBuild
}

// output.css가 없을 경우 빈 파일 생성 (404 방지)
tasks.register('ensureTailwindOutput') {
    doLast {
        def outputFile = file("$projectDir/src/main/resources/static/css/output.css")
        if (!outputFile.exists()) {
            outputFile.parentFile.mkdirs()
            outputFile.text = ""
            println "output.css 파일이 없어 빈 파일을 생성했습니다."
        }
    }
}

// bootRun 전에 output.css 존재 여부 확인
tasks.named('bootRun') {
    dependsOn ensureTailwindOutput
}

// CDN 파일 다운로드 Task
def cdnFiles = [
        [url: "https://unpkg.com/htmx.org@2.0.4/dist/htmx.min.js", dest: "src/main/resources/static/script/htmx.min.js"],
        [url: "https://unpkg.com/htmx-ext-json-enc@2.0.0/json-enc.js", dest: "src/main/resources/static/script/json-enc.js"],

        // editor
        [url: "https://cdn.quilljs.com/1.3.7/quill.snow.css", dest: "src/main/resources/static/css/story/quill.snow.css"],
        [url: "https://cdn.quilljs.com/1.3.7/quill.min.js", dest: "src/main/resources/static/script/story/quill.min.js"],
        [url: "https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css", dest: "src/main/resources/static/css/story/cropper.min.css"],
        [url: "https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js", dest: "src/main/resources/static/script/story/cropper.min.js"],
        [url: "https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.3/min/dropzone.min.css", dest: "src/main/resources/static/css/story/dropzone.min.css"],
        [url: "https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.9.3/min/dropzone.min.js", dest: "src/main/resources/static/script/story/dropzone.min.js"],
        [url: "https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js", dest: "src/main/resources/static/script/story/sortable.min.js"]
]

tasks.register('downloadCdnFiles') {
    group = 'build'
    description = 'CDN 파일 다운로드 및 저장'
    doLast {
        cdnFiles.each { file ->
            def destFile = new File(file.dest)

            if (!destFile.parentFile.exists()) {
                destFile.parentFile.mkdirs()
            }

            if (!destFile.exists()) {
                println "Downloading ${file.url} to ${destFile}"
                new URL(file.url).withInputStream { input ->
                    destFile.withOutputStream { output ->
                        output << input
                    }
                }
                println "Download complete: ${destFile}"
            } else {
                println "${destFile.name} already exists, skipping download."
            }
        }
    }
}

// bootRun 및 bootJar Task에 CDN 파일 다운로드 의존성 추가
tasks.withType(BootRun).configureEach {
    dependsOn downloadCdnFiles
}

tasks.withType(BootJar).configureEach {
    dependsOn downloadCdnFiles
}
